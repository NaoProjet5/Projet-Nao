<?php

namespace App\Controller;

use App\Entity\Comment;
use App\Entity\JdUsers;
use App\Entity\LwArticle;
use App\Entity\Observation;
use App\Entity\Oiseau;
use App\Form\CommentType;
use App\Form\ObservationType;
use App\Repository\LwArticleRepository;
use App\Repository\OiseauRepository;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Security;

class JdPubNaoController extends AbstractController
{
    /**
     * @Route("/", name="home")
     */
    public function jdHome()
    {
        return $this->render('jd_pub_nao/Public/jdHome.html.twig');
    }

    /**
     * @Route("/about", name="aboutUs")
     */
    public function jdAboutUs()
    {
        return $this->render('jd_pub_nao/Public/jdAbout.html.twig');
    }

    /**
     * @Route("/mapBirds", name="birds")
     */
    public function jdAllBirds(OiseauRepository $repos)
    {
        $oiseau = $repos->findAll();
        return $this->render('jd_pub_nao/Public/jdMapBirds.html.twig',[
            'oiseaux'=>$oiseau
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/oneBird/{id}", name="bird")
     */
    public function oneBird(Request $request, ObjectManager $manager, Oiseau $oiseau){
        $observation = new Observation();
        $form = $this->createForm(ObservationType::class, $observation);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid())
        {
            $file = $observation->getPhoto();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('photo_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $observation->setPhoto($fileName);
            dump($observation);

            /*$manager->persist($observation);
            $manager->flush();
            return $this->redirect('blog');*/
        }
        return $this->render('lw/observation.html.twig',[
            'formObservation'=>$form->createView(),
            'oiseau'=>$oiseau
        ]);
    }

    /**
     * @Route("/allArticles", name="blog")
     */
    public function jdAllArticles(LwArticleRepository $repos)
    {
        $article = $repos->findAll();
        return $this->render('jd_pub_nao/Public/jdAllArticles.html.twig',[
            'articles'=>$article
        ]);
    }
    /**
     * @Route("/article/{id}", name="oneArticle")
     */
    public function lwOneArticle(Request $request, ObjectManager $manager, LwArticle $article, Security $security){
        $comment = new Comment();
        $form = $this->createForm(CommentType::class, $comment);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()){
            $comment->setCreatedAt(new \DateTime());
            $user = $security->getUser();
            $comment->setAuthor($user);
            $comment->setArticle($article);
            $manager->persist($comment);
            $manager->flush();
            return $this->redirectToRoute('oneArticle',['id'=>$article->getId()]);

        }

        return $this->render('jd_pub_nao/Public/lwArticle.html.twig',[
            'article'=>$article,
            'formComment'=>$form->createView()
        ]);
    }


}

