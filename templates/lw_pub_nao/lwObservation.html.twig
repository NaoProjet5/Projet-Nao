{% extends 'lwLayout.html.twig' %}
{% block body %}
    <style>
        * { box-sizing: border-box; }
        body {
            font: 16px Arial;
            height: 10px;
        }
        .autocomplete {
            /*the container must be positioned relative:*/
            position: relative;
            display: inline-block;

        }
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 70%;
            left: 0;
            right: 0;
        }
        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;

        }
        .autocomplete-items div:hover {
            /*when hovering an item:*/
            background-color: #e9e9e9;
        }
        .autocomplete-active {
            /*when navigating through the items using the arrow keys:*/
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
    <section class="title_page">

        <div class="section_content">
            <h1> FAIRE UNE OBSERVATION</h1>
        </div>

    </section>
    <div class="body_content" style="overflow : hidden;">

        <div class="last_observations">
            {% if app.user %}

                {% for message in app.flashes('notice_obs') %}
                    <div class="button_style_2" style="margin-top:1.5%;"><strong>
                            {{ message }}
                        </strong></div>
                {% endfor %}
                {% for message in app.flashes('notice_obs_fail') %}
                    <div class="button_style_2" style="margin-top:1.5%;"><strong>
                            {{ message }}
                        </strong></div>
                {% endfor %}
                {% if oiseau is not null and oiseau is defined  %}
                    <h2 class="souligner">Les dernières observations de cet oiseau</h2>
                    <div class="last_observations_content">
                        {% for observation in observations %}
                            <div class="last_observation_item">

                                <h3 style="color : #08ACDE;">{{ observation.nom  }}</h3>

                                <p style="padding-top : 5px;padding-bottom : 5px;"><strong>Coordonnées GPS</strong><br />
                                    Lat : {{ observation.latitude }}, LNG : {{ observation.longitude }}
                                </p>
                            </div>
                        {% endfor %}

                    </div><!--end div last observation -->
                    <h2 class="souligner">Laisser une observation</h2>
                {% endif %}
                <div class="faire_observation_box">
                    <div class="faire_observation_image">

                        <a><img src="{{ asset('assets/img/isometric_nao.PNG') }}"/></a>

                    </div>

                    <div class="faire_observation_form">

                        {{ form_start(formObservation,{ 'attr': {'autocomplete': 'null'}}) }}
                        {{ form_errors(formObservation.recaptcha) }}
                        <div class="nom_oiseau">

                            <h3>Nom de l'observation</h3>

                            <div class="autocomplete" >
                                {% if oiseau is not null and oiseau is defined  %}
                                    {{ form_widget(formObservation.nom
                                        ,{'attr':{'value': oiseau.nomvalide,'class':'observation_input'  }})
                                    }}
                                {% else %}
                                    {{ form_widget(formObservation.nom,{'attr':{'class':'observation_input'  }})
                                    }}
                                {% endif %}

                            </div>

                        </div>

                        <div class="date_heure_observation">

                            <div class="date_observation">

                                <label class="observation_labels">Date de l'observation</label>

                                <div id="app">

                                    <div class="container">
                                        {{ form_errors(formObservation.ObservationDate) }}

                                            {{ form_widget(formObservation.ObservationDate) }}

                                    </div>

                                </div>

                            </div>

                            <div class="heure_observation">

                                <label class="observation_labels">Heure de l'observation</label>
                                {{ form_errors(formObservation.ObservationTime) }}
                                {{ form_widget(formObservation.ObservationTime) }}

                            </div>

                        </div>





                        <div class="lieu_observation">

                            <label class="observation_labels">Lieu de l'observation</label>

                            <a class="button bg_black" onclick="choose_lieu();">Choisir un lieu d'observation</a>
                            <p>OU</p>
                            <a class="button bg_black" onclick="locate()" >Générer mes coordonnées GPS du lieu où je me trouve</a>

                                    <div id="set_lieu_observation">

                                        <a class="close_choose_lieu" onclick="close_choose_lieu();"><i class="fas fa-times-circle"></i></a>

                                        <div class="set_lieu_observation_content">

                                            <div class="header_set_lieu_observation">

                                                <p class="title_information">Déplacez le curseur de la carte à l'endroit où vous avez observé l'oiseau</p>

                                                <div class="infos_coords">

                                                    <label>Latitude :</label>

                                                    <input id="latitude"/>

                                                </div>

                                                <div class="infos_coords">

                                                    <label>Longitude :</label>

                                                    <input id="longitude"/>

                                                </div>

                                                <a onclick="close_choose_lieu();" class="button_valider_lieu_observation">Valider le lieu d'observation</a>

                                            </div>

                                            <div class="map_set_lieu_observation">

                                                <div id="carte_lieu_observation" style="width:100%; height:100%"></div>

                                            </div>

                                        </div>

                                    </div>
                        </div>



                        <!--dupliquer le style de la date et l'heure pour la longitude et la latitude-->
                        <div class="date_heure_observation">

                            <div class="date_observation">

                                <label class="observation_labels">Latitude</label>

                                <div id="app">

                                    <div class="container">
                                        <div class="calendar">
                                            {{ form_widget(formObservation.latitude,{'attr':{'placeholder':"Latitude",'class':'lat'}}) }}
                                        </div>

                                    </div>

                                </div>

                            </div>

                            <div class="heure_observation">

                                <label class="observation_labels">Longitude</label>
                                <div id="app">

                                    <div class="container">
                                        <div class="calendar">

                                            {{ form_widget(formObservation.longitude,{'attr':{'placeholder':"Longitude",'class':'long'}}) }}
                                        </div>

                                    </div>

                                </div>


                            </div>

                        </div>








                        <div class="photo_observation">

                            <label class="observation_labels">Photographie de l'oiseau(facultative)</label>

                            <div class="file_input_div">
                                <div class="file_input">
                                    <label class="image_input_button mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-js-ripple-effect mdl-button--colored">
                                        Choisir une photo <i class="material-icons">file_upload</i>
                                        {{ form_widget(formObservation.photo,{'attr':{'id':'file_input_file'}}) }}
                                    </label>
                                </div>
                            </div>

                        </div>
                        <br />

                        <div class="commentaire_observation">
                            {{ form_label(formObservation.comment_observation,'Commentaire de l\'observation (facultatif) ',{'attr':{'class':'observation_labels'}}) }}

                            {{ form_widget(formObservation.comment_observation,{'attr':{'placeholder':"Commentaire de l'observation"}}) }}

                        </div>


                        <div>
                            {{ form_widget(formObservation.recaptcha) }}
                        </div>

                        <button id="submit" >Envoyer l'observation</button>
                        {{ form_end(formObservation) }}
                    </div>
                </div>
            {% else %}
                <p>Pour laisser les observations vous devez vous  <a href="{{ path('loginUsers') }}" class="button_style_1">Connecter</a></p>
            {% endif %}

        </div><!-- end div laisser un commentaire -->

    </div><!--end of body content observation -->


{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.jquery.min.js"></script>
    <script>
        function autocomplete(inp,arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted value
             */
            var currentFocus;
            /*execute the function when someone writes in the text field:*/
            inp.addEventListener("input",function(e)
            {
                if (this.value.length >=3){
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if(!val) { return false;}
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id",this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for(i = 0; i <arr.length; i++){
                        /*check if the item  starts the same letters as the test field value:*/
                        if(arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()){
                            /*create a DIV element for each matching element */
                            b = document.createElement("DIV");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click",function(e){
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocomplete value,
                                (or any other open lists of autocompleted values:)
                                 */
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }

                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown",function(e){
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40){
                    /*IF the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                }else if (e.keyCode == 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode == 13){
                    e.preventDefault();
                    if (currentFocus > -1 ){
                        if(x) x[currentFocus].click();
                    }
                }

            });
            function addActive(x){
                if(!x) return false;
                removeActive(x);
                if(currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x){
                for (var i = 0; i< x.length; i++){
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt){
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i=0; i < x.length; i++){
                    if (elmnt != x[i] && elmnt != inp){
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            document.addEventListener("click",function(e) {
                closeAllLists(e.target);
            });
        }
        $('#observation_nom').click(function() {
            $.ajax({
                url: "{{ path('get_name_bird') }}",
                success: function (data_name) {
                    autocomplete(document.getElementById("observation_nom"),data_name);
                }
            });
        });

    </script>

    <script>
        $(document).ready(function(){
            $('.js-observation-autocomplete').autocomplete({hint: false}, [
                {
                    source: function(query, cb) {
                        cb([
                            {value: 'foo'},
                            {value: 'bar'}
                        ])
                    }
                }
            ]);
            $(document).ready('.js-observation-autocomplete').each(function() {
                var autocompleteUrl = $(this).data('autocomplete-url');
                console.log(autocompleteUrl);
                $(this).autocomplete({hint: false}, [
                    {
                        source: function(query, cb) {
                            $.ajax({
                                url: autocompleteUrl+'?query='+query
                            }).then(function(data) {
                                cb(data.oiseau);
                            });
                            displayKey: 'lbnom',
                                debounce: 500 // only request every 1/2 second
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    }
                ])
            });
        });

    </script>

    <script>
        var reader = new FileReader();
        reader.onload = function (e) {
            $('#blah').attr('src', e.target.result);
        }

        function readURL(input) {
            if (input.files && input.files[0]) {
                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#observation_photo").change(function(){
            readURL(this);
        });
    </script>
    <script>

        function locate() {
            navigator.geolocation.getCurrentPosition(function(position){
                document.querySelector(".lat").value = position.coords.latitude;
                document.querySelector(".long").value = position.coords.longitude;
            });
        }
    </script>
    <script
            src="https://code.jquery.com/jquery-3.3.1.js"
            integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
            crossorigin="anonymous"></script>

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC1_2otoK8H-gpWeExPvPD-pK7V2CDWNwE"></script>
    <script src='https://jonthornton.github.io/jquery-timepicker/jquery.timepicker.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js'></script>
    <script src='https://cdn.rawgit.com/chingyawhao/materialize-clockpicker/master/dist/js/materialize.clockpicker.js'>
    </script>

    <script src='https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.22/vue.min.js'></script>
    <script>
        function afficher_oiseau(lat,lng){

            var longitude = Number(lng);

            var latitude = Number(lat);

            var oiseau_display;

            oiseau_display = new google.maps.Marker({
                map: map,
                icon: '../assets/img/marker_carte.png',
                position: {lat: latitude, lng: longitude}
            });

            map.setZoom(10);
            map.setCenter({lat: latitude, lng: longitude});
            if (document.getElementById('mapp_obs').style.display == "")
                document.getElementById('mapp_obs').style.display = "none";
            else
                document.getElementById('mapp_obs').style.display = "";
            document.getElementById('lien_mapp_obs').style.display = "";
        }

        var map, popup, Popup;

        var rouge_gorge;

        /** Initializes the map and the custom popup. */
        function initMap() {

            definePopupClass();
            var center = {lat: 46.102079,lng: -0.076303};

            map = new google.maps.Map(document.getElementById('map_canvas'), {
                zoom: 7,
                center: {lat: 46.102079,lng: -0.076303 }
            });

            popup = new Popup(
                new google.maps.LatLng(46.102079, -0.076303),
                document.getElementById('content'));
            popup.setMap(map);




        }



        function anim_rouge_gorge() {
            if (rouge_gorge.getAnimation() !== null) {
                rouge_gorge.setAnimation(null);
            } else {
                rouge_gorge.setAnimation(google.maps.Animation.BOUNCE);
            }
        }

        function anim_oiseau_2() {
            if (rouge_gorge.getAnimation() !== null) {
                rouge_gorge.setAnimation(null);
            } else {
                rouge_gorge.setAnimation(google.maps.Animation.BOUNCE);
            }
        }

        /** Defines the Popup class. */
        function definePopupClass() {
            /**
             * A customized popup on the map.
             * @param {!google.maps.LatLng} position
             * @param {!Element} content
             * @constructor
             * @extends {google.maps.OverlayView}
             */
            Popup = function(position, content) {
                this.position = position;

                content.classList.add('popup-bubble-content');

                var pixelOffset = document.createElement('div');
                pixelOffset.classList.add('popup-bubble-anchor');
                pixelOffset.appendChild(content);

                this.anchor = document.createElement('div');
                this.anchor.classList.add('popup-tip-anchor');
                this.anchor.appendChild(pixelOffset);

                // Optionally stop clicks, etc., from bubbling up to the map.
                this.stopEventPropagation();
            };
            // NOTE: google.maps.OverlayView is only defined once the Maps API has
            // loaded. That is why Popup is defined inside initMap().
            Popup.prototype = Object.create(google.maps.OverlayView.prototype);

            /** Called when the popup is added to the map. */
            Popup.prototype.onAdd = function() {
                this.getPanes().floatPane.appendChild(this.anchor);
            };

            /** Called when the popup is removed from the map. */
            Popup.prototype.onRemove = function() {
                if (this.anchor.parentElement) {
                    this.anchor.parentElement.removeChild(this.anchor);
                }
            };

            /** Called when the popup needs to draw itself. */
            Popup.prototype.draw = function() {
                var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);
                // Hide the popup when it is far out of view.
                var display =
                    Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000 ?
                        'block' :
                        'none';

                if (display === 'block') {
                    this.anchor.style.left = divPosition.x + 'px';
                    this.anchor.style.top = divPosition.y + 'px';
                }
                if (this.anchor.style.display !== display) {
                    this.anchor.style.display = display;
                }
            };

            /** Stops clicks/drags from bubbling up to the map. */
            Popup.prototype.stopEventPropagation = function() {
                var anchor = this.anchor;
                anchor.style.cursor = 'auto';

                ['click', 'dblclick', 'contextmenu', 'wheel', 'mousedown', 'touchstart',
                    'pointerdown']
                    .forEach(function(event) {
                        anchor.addEventListener(event, function(e) {
                            e.stopPropagation();
                        });
                    });
            };
        }



        initMap();


        function view_oiseau(oiseau_cible){
            var view_oiseau = $('#content').attr('data-name',oiseau_cible);
            $('#content').css('display','none');
            view_oiseau.css('display','block');
            $('#cartes_oiseaux').css('display','block');
            $('.carte_oiseau:not(#oiseau_'+oiseau_cible+')').css('display','none');
            $('.carte_oiseau #oiseau_'+oiseau_cible).css('display','block');
            map.setZoom(10);
            map.setCenter(rouge_gorge.getPosition());
        }

        function hide_oiseau(oiseau_cible){
            var view_oiseau = $('#content').attr('data-name',oiseau_cible);
            $('#content').css('display','block');
            view_oiseau.css('display','none');
            $('#cartes_oiseaux').css('display','none');
            $('.carte_oiseau:not(#oiseau_'+oiseau_cible+')').css('display','block');
            $('.carte_oiseau #oiseau_'+oiseau_cible).css('display','none');
            map.setZoom(7);
            map.setCenter(center);
        }


    </script>
    <script type="text/javascript">
        /** Partie Obtention des coordonnées GPS **/
        function initialiser_gps() {
            var latlng = new google.maps.LatLng(46.102079, -0.076303);
            //objet contenant des propriétés avec des identificateurs prédéfinis dans Google Maps permettant
            //de définir des options d'affichage de notre carte
            var options = {
                center: latlng,
                zoom: 4,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };


            //constructeur de la carte qui prend en paramêtre le conteneur HTML
            //dans lequel la carte doit s'afficher et les options
            var carte = new google.maps.Map(document.getElementById("carte_gps"), options);
            //création du marqueur
            var marqueur = new google.maps.Marker({
                position: new google.maps.LatLng(44.70329, 2.26090),
                map: carte
            });
            marqueur.setDraggable(true);

            google.maps.event.addListener(marqueur, 'dragend', function(event) {
                //message d'alerte affichant la nouvelle position du marqueur
                //alert("La nouvelle coordonnée du marqueur est : "+event.latLng);
                document.querySelector(".lat").value = event.latLng.lat();
                document.querySelector(".long").value = event.latLng.lng();
            });

        }
        initialiser_gps()
    </script>
    <script>


        $('.timepicker').pickatime({
            default: 'now',
            twelvehour: false, // change to 12 hour AM/PM clock from 24 hour
            donetext: 'OK',
            autoclose: true,
            vibrate: true // vibrate the device when dragging clock hand
        });
    </script>
    <script>

        var fileInputTextDiv = document.getElementById('file_input_text_div');
        var fileInput = document.getElementById('file_input_fi');
        var fileInputText = document.getElementById('file_input_text');

        fileInput.addEventListener('change', changeInputText);
        fileInput.addEventListener('change', changeState);


        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#file_input_text_div img').attr('src', e.target.result);
                };

                reader.readAsDataURL(input.files[0]);
            }
        }

        function changeInputText() {
            readURL(this);
            var str = fileInput.value;
            var i;
            if (str.lastIndexOf('\\')) {
                i = str.lastIndexOf('\\') + 1;
            } else if (str.lastIndexOf('/')) {
                i = str.lastIndexOf('/') + 1;
            }

            $('#file_input_text_div').css('display','block');
            $('.file_input_div').css('padding-bottom','210px');
        }

        function changeState() {
            if (fileInputText.value.length != 0) {
                if (!fileInputTextDiv.classList.contains("is-focused")) {
                    fileInputTextDiv.classList.add('is-focused');
                }
            } else {
                if (fileInputTextDiv.classList.contains("is-focused")) {
                    fileInputTextDiv.classList.remove('is-focused');
                }
            }
        }

        function choose_lieu(){

            $('#set_lieu_observation').css('display','block');
        }

        function close_choose_lieu(){
            $('#set_lieu_observation').css('display','none');
        }


    </script>


    <script type="text/javascript">
        function initialiser_gps() {
            var latlng = new google.maps.LatLng(46.779231, 6.659431);
            //objet contenant des propriétés avec des identificateurs prédéfinis dans Google Maps permettant
            //de définir des options d'affichage de notre carte
            var options = {
                center: latlng,
                zoom: 3,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };


            //constructeur de la carte qui prend en paramêtre le conteneur HTML
            //dans lequel la carte doit s'afficher et les options
            var carte = new google.maps.Map(document.getElementById("carte_lieu_observation"), options);
            //création du marqueur
            var marqueur = new google.maps.Marker({
                position: new google.maps.LatLng(46.779231, 6.659431),
                map: carte
            });

            marqueur.setDraggable(true);

            google.maps.event.addListener(marqueur, 'dragend', function(event) {
                //message d'alerte affichant la nouvelle position du marqueur
                //alert("La nouvelle coordonnée du marqueur est : "+event.latLng);

                $('input#latitude').val(event.latLng.lat());

                $('input#longitude').val(event.latLng.lng());
                document.querySelector(".lat").value = event.latLng.lat();
                document.querySelector(".long").value = event.latLng.lng();

            });

            $('input#latitude').keyup(function() {
                var lat_marqueur = Number($('input#latitude').val());
                var lng_marqueur = Number($('input#longitude').val());
                marqueur.setPosition({lat : lat_marqueur, lng : lng_marqueur});
            });

            $('input#longitude').keyup(function() {
                var lat_marqueur = Number($('input#latitude').val());
                var lng_marqueur = Number($('input#longitude').val());
                marqueur.setPosition({lat : lat_marqueur, lng : lng_marqueur});
            });

        }

        initialiser_gps()


    </script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script>
        $( ".obs_date" ).datepicker({
            dateFormat: "yy-mm-dd"
        });
    </script>


{% endblock %}